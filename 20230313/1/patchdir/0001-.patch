From 640fa376beee2da26f21af07a30fe02afe8dafb0 Mon Sep 17 00:00:00 2001
From: mandesero <mandesero@gmail.com>
Date: Sat, 18 Mar 2023 15:13:56 +0300
Subject: [PATCH 1/3] =?UTF-8?q?=D0=94=D0=BE=D0=B1=D0=B0=D0=B2=D0=BB=D0=B5?=
 =?UTF-8?q?=D0=BD=20=D0=BA=D0=BB=D0=B8=D0=B5=D0=BD=D1=82.?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 20230313/1/prog.py | 153 +++++++++++++--------------------------------
 1 file changed, 45 insertions(+), 108 deletions(-)

diff --git a/20230313/1/prog.py b/20230313/1/prog.py
index f7fa2d9..9501d55 100644
--- a/20230313/1/prog.py
+++ b/20230313/1/prog.py
@@ -1,33 +1,27 @@
 import cowsay as cs
-import shlex as sx
+import shlex
 import cmd
+import sys
+import socket
 
 from custom_monster import cust_mstr
-from defaults import WEAPONS, COMPLETE
+from defaults import WEAPONS
 
-
-def complete(text, line, begidx, endidx):
-    args = sx.split(line)
-
-    match args:
-        case ["attack"]:
-            key, command = "", "attack"
-        case ["attack", t]:
-            if t == "with":
-                key, command = "with", "attack"
-            else:
-                key, command = "", "attack"
-        case ["attack", _, "with"]:
-            key, command = "with", "attack"
-        case ["attack", _, "with", _]:
-            key, command = "with", "attack"
-
-    return [s for s in COMPLETE[command][key] if s.startswith(text)]
+list_cows = cs.list_cows() + ["jgsbat"]
 
 
 class Game(cmd.Cmd):
-    field = [[None] * 10 for i in range(10)]
-    pos = [0, 0]
+    @staticmethod
+    def send_recv_server(msg):
+        s.send((msg.strip() + "\n").encode())
+        ans = s.recv(1024).decode().strip().replace("'", "")
+
+        if len(t := ans.split("\n")) == 3:
+            print(cs.cowsay(message=t[1], cowfile=cust_mstr)) if t[
+                1
+            ] == "jgsbat" else print(cs.cowsay(message=t[1], cow=t[2]))
+        else:
+            print(ans)
 
     def do_addmon(self, args):
         """
@@ -43,63 +37,25 @@ class Game(cmd.Cmd):
 
         """
 
-        command = sx.split(args)
-
-        name = command[0]
-        message = command[command.index("hello") + 1]
-        hp = int(command[command.index("hp") + 1])
-        x, y = (
-            int(command[command.index("coords") + 1]),
-            int(command[command.index("coords") + 2]),
-        )
-
-        if name not in (cs.list_cows() + ["jgsbat"]):
+        if len(args := shlex.split(args)) == 8 and args[0] in list_cows:
+            msg = "addmon " + shlex.join(args)
+            Game.send_recv_server(msg)
+        elif args[0] not in list_cows:
             print("Cannot add unknown monster")
-            return
+        else:
+            print("Invalid arguments")
 
-        flag = self.field[x][y] is None
-        self.field[x][y] = [message, name, hp]
-        print(
-            f"Added monster {name} to ({x}, {y}) saying {sx.quote(message)} with hp {hp}"
-        )
-        if not flag:
-            print("Replaced the old monster")
+    def do_up(self, args):
+        Game.send_recv_server("up")
 
-    def do_move(self, args):
-        """
-        Перемещение по полю.
+    def do_down(self, args):
+        Game.send_recv_server("down")
 
-        move [up|down|right|left]
-        """
+    def do_left(self, args):
+        Game.send_recv_server("left")
 
-        way = sx.split(args)[0]
-        match way:
-            case "up":
-                self.pos[1] = (self.pos[1] + 1) % 10
-            case "down":
-                self.pos[1] = (self.pos[1] - 1) % 10
-            case "right":
-                self.pos[0] = (self.pos[0] + 1) % 10
-            case "left":
-                self.pos[0] = (self.pos[0] - 1) % 10
-
-        print(f"Moved to ({self.pos[0]}, {self.pos[1]})")
-        self.onecmd(f"encounter {self.pos[0]} {self.pos[1]}")
-
-    def do_encounter(self, args):
-        x, y = list(map(int, sx.split(args)))
-        if monster := self.field[x][y]:
-            if monster[1] == "jgsbat":
-                print(cs.cowthink(message=monster[0], cowfile=cust_mstr))
-            else:
-                print(cs.cowsay(message=monster[0], cow=monster[1]))
-            monster[-1] -= 1
-
-    def do_allow_monsters(self, args):
-        """
-        Список допустимых имен монстров.
-        """
-        print(*(cs.list_cows() + ["jgsbat"]))
+    def do_right(self, args):
+        Game.send_recv_server("right")
 
     def do_attack(self, args):
         """
@@ -111,40 +67,17 @@ class Game(cmd.Cmd):
             <name>         : имя монстра (см. allow_monsters - список допустимых монстров);
             <weapon>       : оружие для атаки;
         """
-        name = None
-        weapon = "sword"
-        if args := sx.split(args):
-            match args:
-                case name, _, weapon:
-                    name = name
-                    weapon = weapon
-                case _, weapon:
-                    weapon = weapon
-                case name:
-                    name = name[0]
-
-        if monster := self.field[self.pos[0]][self.pos[1]]:
-            if name and name != monster[1]:
-                print(f"No {name} here")
-                return
-
-            damage = WEAPONS[weapon] if monster[-1] >= WEAPONS[weapon] else monster[-1]
-            monster[-1] -= damage
-
-            print(f"Attacked {monster[1]}, damage {int(damage)} hp")
-            if monster[-1]:
-                print(f"{monster[1]} now has {monster[-1]}")
-            else:
-                print(f"{monster[1]} died")
-                self.field[self.pos[0]][self.pos[1]] = None
-        else:
-            print(f"No {'monster' if not name else name} here")
-
-    def complete_attack(self, text, line, begidx, endidx):
-        return complete(text, line, begidx, endidx)
 
-    def complete_attach(self, text, line, begidx, endidx):
-        return complete(text, line, begidx, endidx)
+        match args := shlex.split(args):
+            case [t, "with", weapon]:
+                if weapon in WEAPONS:
+                    Game.send_recv_server(" ".join(["attack", t, str(WEAPONS[weapon])]))
+                else:
+                    print("Unknown weapon")
+            case [t]:
+                Game.send_recv_server(" ".join(["attack", t, str(WEAPONS["sword"])]))
+            case _:
+                print("Invalid arguments")
 
     def do_exit(self, args):
         """
@@ -155,8 +88,12 @@ class Game(cmd.Cmd):
 
 def main():
     print("<<< Welcome to Python-MUD 0.1 >>>")
+    print(s.recv(1024).decode().strip())
     Game().cmdloop()
 
 
 if __name__ == "__main__":
-    main()
+    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
+        s.connect((sys.argv[1], int(sys.argv[2]) if len(sys.argv) > 2 else 1337))
+        s.send("Connect\n".encode())
+        main()
-- 
2.39.2

